# Importando bibliotecas

import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
from variables.tabela_var import tabela_var, a_avr2
from variables.tabela_relato import relaa
from variables.ranking import aux_card_porcen,aux_quartil_teste,aux_card_total, ns_quartil, namespace_list, graurisco_list,name_quartil
from variables.filtro import l_media_var, a_var3, l_media_ques, l_media_relaa2, a_ques2
from PIL import Image
import plotly.graph_objects as go
import time
import matplotlib.pyplot as plt
import matplotlib
import base64

# Fun√ß√µes
def reorder_columns(dataframe, col_name, position):
    """Reorder a dataframe's column.
    Args:
        dataframe (pd.DataFrame): dataframe to use
        col_name (string): column name to move
        position (0-indexed position): where to relocate column to
    Returns:
        pd.DataFrame: re-assigned dataframe
    """
    temp_col = dataframe[col_name]
    dataframe = dataframe.drop(columns=[col_name])
    dataframe.insert(loc=position, column=col_name, value=temp_col)
    return dataframe
def get_table_download_link(df):
    """Generates a link allowing the data in a given panda dataframe to be downloaded
    in:  dataframe
    out: href string
    """
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()  # some strings <-> bytes conversions necessary here
    href = f'<a href="data:file/csv;base64,{b64}" download="listanamespaces.csv">Clique aqui para baixar o CSV</a>'
    return href

# !!!adicionar grau de risco para quando selecionar o namespace
# Colocando imagem em cima

st.image('[LOGO] Eduqo.png')

# Titulo


"""
# üå°Ô∏è Health Score SC - Produto padre jow
#### Projeto utilizando apenas escolas do Sucesso do cliente.

"""

# Side bar
## Imagem na side bar
image = Image.open('[LOGO] Eduqo.png')
st.sidebar.image(image,caption='Eduqo - Plataforma QM√°gico',use_column_width=True)

st.sidebar.markdown('Feito por: Gabriel Philot (Tio Gibbs)')
st.sidebar.write('#### Material de apoio, caso queira saber mais sobre o projeto.')
st.sidebar.write('####')
st.sidebar.write("###### Forms:  [link](https://docs.google.com/forms/d/e/1FAIpQLSfmUHHnNu8wiMH2W6UuBQS354UL25D_ZIDstYqvMj7bLSs4vA/viewform)")
st.sidebar.write("##### Docs:  [link](https://docs.google.com/document/d/1bdASwpnSDREVDR0TwKtcvcxNL4AFz-xR5WSNNTa-hwM/edit)")
st.sidebar.write("##### Github:  [link](https://github.com/GabrielMPhilot/EduqoHealthScoreSc)")
st.sidebar.write('#')
st.sidebar.write('#### Resultado da classifica√ß√£o de nosso modelo:',get_table_download_link(name_quartil), unsafe_allow_html=True)


# Grande ideia

"""
### üí° Grande ideia do Projeto
O objetivo desse projeto √© criar um HealthScore escalavel e preciso sobre nossos clientes.
Utilizamos primeiramente dados diversos da usabilidade do Produto (por enquanto), para criarmos
m√©tricas que consigam mapear se nossos clientes est√£o utilizando a plataforma de maneira adequada,
com as m√©tricas √© formado um modelo para Rankear cada escola em um grau de risco especifico.

### üíæ Dados utilizados
Os dados utilizados foram segmentados (por enquanto) em 3 diferentes tabelas.
"""
"""
#### 1. Tabela de Varia√ß√µes:
Essa tabela contempla dados de varia√ß√£o do n¬∞ de alunos, varia√ß√£o do n¬∞ A.A's subidas (proffs),
varia√ß√£o do n¬∞ de intera√ß√£o de alunos em A.A's, varia√ß√£o do n¬∞ de conte√∫dos em caderno subidos (proffs) e
varia√ß√£o do n¬∞ de intera√ß√£o de alunos em conte√∫dos do caderno. O intervalo de extra√ß√£o desses dados √© de
dados de  **01/03/2020 at√© 01/08/2020 e  01/03/2021 at√© 01/08/2021**.

#### 2. Tabela de Quest√µes:
Essa Tabela contempla dados do n¬∞ de quest√µes totais subidas(proffs/admin), n¬∞ de quest√µes discursivas subidas(proffs/admin),
n¬∞ de quest√µes totais do banco subidas (proffs/admin), n¬∞ de quest√µes discursivas do banco subidas (proffs/admin). O intervalo de extra√ß√£o desses dados √© de
dados de  **01/01/2021 at√© 01/08/2021**.
#### 3. Tabela de Relat√≥rios:
Essa Tabela contempla dados do n¬∞ de vizualiza√ß√£o de rel√°torios (proffs/admin) de A.A's, n¬∞ de vizualiza√ß√£o de rel√°torios (proffs/admin) de S.Exs,
n¬∞ de vizualiza√ß√£o de rel√°torios (proffs/admin) de Cadernos, n¬∞ de vizualiza√ß√£o de rel√°torios (proffs/admin) de AD's, n¬∞ de vizualiza√ß√£o de rel√°torios (proffs/admin) Mensais (QBR,Mensal). O intervalo de extra√ß√£o desses dados √© de
dados de  **01/01/2021 at√© 01/08/2021**.
"""
"""
### üîç Certo agora vamos para os **Resultados**.

"""

# Colando n¬∞ total e Porcentagem
#aux_card_porcen - Porcentagem
#aux_card_total - Quantidade

figa = go.Figure()

figa.add_trace(go.Indicator(
    #mode = "number+delta",
    value = aux_card_total ,
    domain = {'x': [0.25, 0.75], 'y': [0.7, 1]},
    title = {"text": "N¬∞ de escolas analisadas<br><span style='font-size:0.8em;color:gray'>"}))
    ##delta = {'reference': 400, 'relative': True, 'position' : "top"}))
figa.add_trace(go.Indicator(
    #mode = "number+delta",
    value = aux_card_porcen,
    domain = {'x': [0.25, 0.75], 'y': [0, 0.3]},
    title = {"text": "<span style='font-size:1em;color:red'>%<br><span style='font-size:0.8em;color:red'>de escolas em Risco</span><br>"}))
    ##delta = {'reference': 400, 'relative': True, 'position' : "top"}))
st.plotly_chart(figa)



# Gr√°fico do Health Score - Pontua√ß√£o via nosso modelo
fig =px.bar(aux_quartil_teste, x='Risco', y='Quantidade de escolas',
           color='Risco',
           color_discrete_sequence=["#E45756","#F58518","#54A24B","#4C78A8"],
           #color_discrete_sequence=px.colors.qualitative.T10,
            text=aux_quartil_teste['Porcentagem'])


fig.update_xaxes(showgrid=False)
fig.update_layout(title = "Distribui√ß√£o no N¬∞ de escolas por grau de Risco")

st.plotly_chart(fig)
"""
"""
left_column, right_column = st.columns(2)
pressed = right_column.button('Download Resultado')
if pressed:
    left_column.write(get_table_download_link(name_quartil), unsafe_allow_html=True)
#st.markdown(get_table_download_link(name_quartil), unsafe_allow_html=True)
"""
##### Com o rankeamento de risco, podemos olhar as escolas que est√£o em perigo e aquelas
##### que est√£o fazendo um bom uso, de acordo com suas m√©tricas.

"""
"""

"""
expander = st.expander("OBS M√©tricas -> (clique aqui üñ±Ô∏è)")
expander.write("(1.1) As M√©tricas que ser√£o apresentadas a seguir, foram tratadas e modeladas para formar o ranking, por√©m ser√£o mostradas de forma 'Bruta' para conseguirmos comparar as diferen√ßas com mais facilidade. (1.2) A M√©dia apresentada das escolas tamb√©m s√£o as m√©dias 'Brutas'.")
expander.write("(2.1) Nas tabelas com mapa de calor os valores m√°ximos (mais escuros) n√£o s√£o globais, ou seja se referem ao valor m√°ximo da tabela selecionada pelo filtro, a n√£o ser que a escolha de filtro seja todos os namespaces. ")
expander.write("(2.2) Nas visualiza√ß√µes por Grau de Risco e Todos os namespaces, o valor de risco apresentado nas tabelas √© referente a pontua√ß√£o de nosso modelo, ent√£o n√£o necessariamente o valor de uma determinada tabela √© o que faz a escola estar em risco ou n√£o.")
"""

"""
"""
Agora para visualiza√ß√£o das M√©tricas
"""
####################################### FILTRO ##############################
aux_filtro_show=0
a_dict=0
genre = st.radio(
 "Escolha o tipo de filtro.",
('Grau de Risco', 'Namespace','Todos os Namespaces'))

if genre == 'Namespace':

    #st.write('Escolha agora o  ',genre)
    select = st.selectbox('Namespace', namespace_list, key='2')
    #st.write('O Namespace selecionada foi : ',select)
    aux_filtro_show=1
    a_dict=0
    namevar=a_var3.copy()
    nameques=a_ques2.copy()
    namerela=relaa.copy()

    ######## Tabela varia√ß√µes
    filtrovar=namevar[(namevar["namespace"] == select)]
    filtrovar=l_media_var.append(filtrovar).reset_index(drop=True)#.transpose().reset_index()


    #arrumando tabela para plot gr√°fico
    aux_filtrovar=filtrovar.copy()
    a_filtrovar=aux_filtrovar.columns.values.tolist()
    a_filtrovar.remove('namespace')
    filtrovar_aux=pd.DataFrame()
    for col in a_filtrovar:
        for i in range(len(aux_filtrovar[col])):
            var_ns=aux_filtrovar.loc[i,"namespace"]
            var_variav=col
            var_valor=aux_filtrovar.loc[i, col]
            var_porcent=str(aux_filtrovar.loc[i, col])+'%'
            new_row={'Namespace': var_ns, 'M√©tricas': col, 'Valor': var_valor, 'Porcentagem': var_porcent}
            filtrovar_aux=filtrovar_aux.append(new_row, ignore_index=True)

    #plot gr√°fico vari√ß√µes
    figvar =px.bar(filtrovar_aux, x='Valor', y='M√©tricas',
               color='Namespace',orientation='h',
               color_discrete_sequence=["rgb(102, 197, 204)","rgb(248, 156, 116)"],#"#54A24B","#4C78A8"],
               #color_discrete_sequence=px.colors.qualitative.T10,
                text=filtrovar_aux['Porcentagem'])


    figvar.update_xaxes(showgrid=False)
    figvar.update_layout(title = "M√©tricas na Tabela de Varia√ß√£o")

    ########## Tabela questoes
    filtroques=nameques[(nameques["namespace"] == select)]
    filtroques=l_media_ques.append(filtroques).reset_index(drop=True)#.transpose().reset_index()


    #arrumando tabela para plot gr√°fico
    aux_filtroques=filtroques.copy()
    a_filtroques=aux_filtroques.columns.values.tolist()
    a_filtroques.remove('namespace')
    a_filtroques_aux=pd.DataFrame()
    for col in a_filtroques:
        for i in range(len(aux_filtroques[col])):
            ques_ns=aux_filtroques.loc[i,"namespace"]
            ques_variav=col
            ques_valor=aux_filtroques.loc[i, col]
            ques_porcent=str(aux_filtroques.loc[i, col])+'%'
            new_rowq={'Namespace': ques_ns, 'M√©tricas': col, 'Valor': ques_valor, 'Porcentagem': ques_porcent}
            a_filtroques_aux=a_filtroques_aux.append(new_rowq, ignore_index=True)

    #plot gr√°fico questoes
    figques =px.bar(a_filtroques_aux, x='Valor', y='M√©tricas',
               color='Namespace',orientation='h',
               color_discrete_sequence=["rgb(102, 197, 204)","rgb(248, 156, 116)"],#"#54A24B","#4C78A8"],
               #color_discrete_sequence=px.colors.qualitative.T10,
                text=a_filtroques_aux['Valor'])


    figques.update_xaxes(showgrid=False)
    figques.update_layout(title = "M√©tricas na Tabela de Quest√µes")

    ########## Tabela relatorios
    filtrorela=namerela[(namerela["namespace"] == select)]
    filtrorela=l_media_relaa2.append(filtrorela).reset_index(drop=True)#.transpose().reset_index()


    #arrumando tabela para plot gr√°fico
    aux_filtrorela=filtrorela.copy()
    a_filtrorela=aux_filtrorela.columns.values.tolist()
    a_filtrorela.remove('namespace')
    a_filtrorela_aux=pd.DataFrame()
    for col in a_filtrorela:
        for i in range(len(aux_filtrorela[col])):
            rel_ns=aux_filtrorela.loc[i,"namespace"]
            rel_variav=col
            rel_valor=aux_filtrorela.loc[i, col]
            rel_porcent=str(filtrorela.loc[i, col])+'%'
            new_rowr={'Namespace': rel_ns, 'M√©tricas': col, 'Valor': rel_valor, 'Porcentagem': rel_porcent}
            a_filtrorela_aux=a_filtrorela_aux.append(new_rowr, ignore_index=True)

    #plot gr√°fico rela
    figrel =px.bar(a_filtrorela_aux, x='Valor', y='M√©tricas',
               color='Namespace',orientation='h',
               color_discrete_sequence=["rgb(102, 197, 204)","rgb(248, 156, 116)"],#"#54A24B","#4C78A8"],
               #color_discrete_sequence=px.colors.qualitative.T10,
                text=a_filtrorela_aux['Valor'])


    figrel.update_xaxes(showgrid=False)
    figrel.update_layout(title = "M√©tricas na Tabela de Rel√°torios")


elif genre =='Grau de Risco':
    #st.write('Escolha agora o  ',genre)
    select = st.selectbox('Grau de Risco', graurisco_list, key='2')
    #st.write('O Grau de risco selecionad foi : ',select)
    aux_filtro_show=0
    a_dict=0
    namevar=a_var3.copy()
    nameques=a_ques2.copy()
    namerela=relaa.copy()

    ######## Variavel de filtro
    aux_filtro=ns_quartil[(ns_quartil["Risco"] == select)]
    aux_filtro=aux_filtro["namespace"]

    ######## Tabela varia√ß√µes

    filtro_var=namevar[namevar['namespace'].isin(aux_filtro)]
    #cl_aux=filtro_var.columns.values.tolist()
    #cl_aux.remove("namespace")
    #for col in cl_aux:
        #filtro_var.loc[:,col]=filtro_var[col].astype(str)+'%'
    filtro_var=filtro_var.reset_index(drop=True)
    ######## Tabela quest

    filtro_ques=nameques[nameques['namespace'].isin(aux_filtro)].reset_index(drop=True)

    ######## Tabela rela

    filtro_rela=namerela[namerela['namespace'].isin(aux_filtro)].reset_index(drop=True)
else:
    st.write(genre, 'foram selecionados.')
    aux_filtro_show=0
    a_dict=1
    namevar=a_var3.copy()
    nameques=a_ques2.copy()
    namerela=relaa.copy()

    ######## Tabela varia√ß√µes
    #cltd_aux=namevar.columns.values.tolist()
    #cltd_aux.remove("namespace")
    filtro_var=namevar
    filtro_var=pd.merge(filtro_var, ns_quartil, on=["namespace"], how='outer')

    # Ordenando Df

    filtro_var['ordem']=0
    for i in range(len(filtro_var['Risco'])):
        b=0
        a=filtro_var['Risco'][i]
        if a =='Alto Risco':
            b=int(1)
        elif a =='Risco':
            b=int(2)
        elif a =='Neutro':
            b=int(3)
        elif a =='Bom uso':
            b=int(4)
        filtro_var.loc[i,"ordem"]=b
    filtro_var=filtro_var.sort_values(by="ordem", ascending=True).reset_index(drop=True)
    filtro_var=reorder_columns(filtro_var, 'Risco',1)
    filtro_var=filtro_var.drop(['ordem'], axis=1).reset_index(drop=True)


    ######## Tabela quest

    filtro_ques=nameques
    filtro_ques=pd.merge(filtro_ques, ns_quartil, on=["namespace"], how='outer')

    # Ordenando Df

    filtro_ques['ordem']=0
    for i in range(len(filtro_ques['Risco'])):
        b=0
        a=filtro_ques['Risco'][i]
        if a =='Alto Risco':
            b=int(1)
        elif a =='Risco':
            b=int(2)
        elif a =='Neutro':
            b=int(3)
        elif a =='Bom uso':
            b=int(4)
        filtro_ques.loc[i,"ordem"]=b
    filtro_ques=filtro_ques.sort_values(by="ordem", ascending=True).reset_index(drop=True)
    filtro_ques=reorder_columns(filtro_ques, 'Risco',1)
    filtro_ques=filtro_ques.drop(['ordem'], axis=1).reset_index(drop=True)



    ######## Tabela rela

    filtro_rela=namerela
    filtro_rela=pd.merge(filtro_rela, ns_quartil, on=["namespace"], how='outer')

    # Ordenando Df

    filtro_rela['ordem']=0
    for i in range(len(filtro_rela['Risco'])):
        b=0
        a=filtro_rela['Risco'][i]
        if a =='Alto Risco':
            b=int(1)
        elif a =='Risco':
            b=int(2)
        elif a =='Neutro':
            b=int(3)
        elif a =='Bom uso':
            b=int(4)
        filtro_rela.loc[i,"ordem"]=b
    filtro_rela=filtro_rela.sort_values(by="ordem", ascending=True).reset_index(drop=True)
    filtro_rela=reorder_columns(filtro_rela, 'Risco',1)
    filtro_rela=filtro_rela.drop(['ordem'], axis=1).reset_index(drop=True)



'Aguarde s√≥ um momentinho'
latest_iteration = st.empty()
bar = st.progress(0)
for i in range(100):
  # Update the progress bar with each iteration.
  latest_iteration.text(f'Processando {i+1}')
  bar.progress(i + 1)
  time.sleep(0.03)
'...pronto!'

if aux_filtro_show == 1:
    """

    """
    ans=name_quartil.copy()
    ans=ans[(ans["namespace"]==select)].reset_index(drop=True)
    ans=ans.loc[0,"Risco"]
    if ans == 'Alto Risco':
        st.write('### O Grau de Risco do namespace √©: ',ans," üî•")
    elif ans == 'Risco':
        st.write('### O Grau de Risco do namespace √©: ',ans," ‚ö†Ô∏è")
    elif ans == 'Neutro':
        st.write('### O Grau de Risco do namespace √©: ',ans," ü•à")
    elif ans == 'Bom uso':
        st.write('### O Grau de Risco do namespace √©: ',ans," ü•á")



    """

    """
    """

    """
    st.plotly_chart(figvar)
    st.plotly_chart(figques)
    st.plotly_chart(figrel)
else:
    ### Tabela varia√ß√µes
    st.write('M√©dia (Sc-Eduqo) das m√©tricas na tabela de varia√ß√µes')

    #M√©dia Eduqo
    #arrumando m√©dia..
    lm=l_media_var.copy()
    alm=l_media_var.columns.values.tolist()
    #alm.remove("namespace")
    il=0
    lmedia=pd.DataFrame()

    for col in alm:
        listmaux=list()
        asx=lm.loc[il,col]
        axx=str(asx)+'%'
        listmaux.append(axx)
        za=pd.DataFrame(listmaux)
        lmedia[col]=za.sum()
    lmedia["namespace"]='Media SC-Eduqo'
    lmedia
    st.write('### M√©tricas na Tabela de Varia√ß√£o')

    """

    """
    # Arrumando Dataframe...
    aux_dict_var=filtro_var.columns.values.tolist()
    aux_dict_var.remove("namespace")
    if a_dict==1:
        aux_dict_var.remove("Risco")

    dict_var={col :"{:,.2f}%" for col in aux_dict_var}
    var_col_mask = filtro_var.dtypes.apply(lambda d: issubclass(np.dtype(d).type, np.number))
    filtro_var = filtro_var.style.format(dict_var).background_gradient(cmap='Greens')\
                                                        .set_properties(subset=filtro_var.columns[~var_col_mask], # right-align the numeric columns and set their width
                                                        **{'width':'10em', 'text-align':'left'})\
                                                        #.set_properties(subset=beneficios_grupo_total4.columns[numeric_col_mask], # right-align the numeric columns and set their width
                                                        #**{'width':'10em', 'text-align':'center'})

    #mostrando tabela
    st.dataframe(filtro_var)





    ### Tabela Quest√µes
    st.write('M√©dia (Sc-Eduqo) das m√©tricas na tabela de quest√µes')
    #M√©dia Eduqo

    #arrumando m√©dia..
    lmq=l_media_ques.copy()
    almq=l_media_ques.columns.values.tolist()
    almq.remove("namespace")
    il=0
    lmediaq=pd.DataFrame()

    for col in almq:
        listmauxq=list()
        asxq=lmq.loc[il,col]
        axxq="{0:.2f}".format(asxq)
        listmauxq.append(axxq)
        zaq=pd.DataFrame(listmauxq)
        lmediaq[col]=zaq.sum()
    lmediaq["namespace"]='Media SC-Eduqo'
    lmediaq=reorder_columns(lmediaq,"namespace",0)
    lmediaq
    st.write('### M√©tricas na Tabela de Quest√µes')
    """

    """
    # Arrumando Dataframe...
    aux_dict_ques=filtro_ques.columns.values.tolist()
    aux_dict_ques.remove("namespace")
    if a_dict==1:
        aux_dict_ques.remove("Risco")

    dict_ques={col :"{:,.2f}" for col in aux_dict_ques}
    ques_col_mask = filtro_ques.dtypes.apply(lambda d: issubclass(np.dtype(d).type, np.number))
    filtro_ques = filtro_ques.style.format(dict_ques).background_gradient(cmap='Greens')\
                                                        .set_properties(subset=filtro_ques.columns[~ques_col_mask], # right-align the numeric columns and set their width
                                                        **{'width':'10em', 'text-align':'left'})\


    #mostrando tabela
    st.dataframe(filtro_ques)


    ### Tabela rela

    st.write('M√©dia (Sc-Eduqo) das m√©tricas na tabela de rel√°torios')
    #M√©dia Eduqo

    #arrumando m√©dia..
    lmr=l_media_relaa2.copy()
    almr=l_media_relaa2.columns.values.tolist()
    almr.remove("namespace")
    il=0
    lmediar=pd.DataFrame()

    for col in almr:
        listmauxr=list()
        asxr=lmr.loc[il,col]
        axxr="{0:.2f}".format(asxr)
        listmauxr.append(axxr)
        zar=pd.DataFrame(listmauxr)
        lmediar[col]=zar.sum()
    lmediar["namespace"]='Media SC-Eduqo'
    lmediar=reorder_columns(lmediar,"namespace",0)
    lmediar

    st.write('### M√©tricas na Tabela de Rel√°torios')
    """

    """
    # Arrumando Dataframe...
    aux_dict_rel=filtro_rela.columns.values.tolist()
    aux_dict_rel.remove("namespace")
    if a_dict==1:
        aux_dict_rel.remove("Risco")

    dict_rel={col :"{:,.2f}" for col in aux_dict_rel}
    rel_col_mask = filtro_rela.dtypes.apply(lambda d: issubclass(np.dtype(d).type, np.number))
    filtro_rela = filtro_rela.style.format(dict_rel).background_gradient(cmap='Greens')\
                                                        .set_properties(subset=filtro_rela.columns[~rel_col_mask], # right-align the numeric columns and set their width
                                                        **{'width':'10em', 'text-align':'left'})\


    #mostrando tabela
    st.dataframe(filtro_rela)

####################################### INSIGHTS ##############################

"""
### üíé Ilumina√ß√µes ( Insights )
O foco ( por enquanto ) ser√° em cima do mal uso da plataforma.
"""

expander_var = st.expander("M√©tricas de Varia√ß√µes -> (clique aqui üñ±Ô∏è)")
expander_var.write("(1) Escolas com quedas dr√°sticas no n√∫mero de alunos interagindo, pode ser algo de grande risco, porque mostra que a escola ou perdeu alunos, ou n√£o est√° realizando boa parte de suas rotinas na plataforma. (2) Varia√ß√µes grandes na parte de subida de conte√∫dos e intera√ß√µes dos alunos podem indicar, que a escola n√£o est√£o realizando toda sua rotina conosco ( ent√£o est√£o realizando onde? pode ser uma solu√ß√£o da concorr√™ncia? ) indicando uma queda no valor enchergado na plataforma.")
expander_que = st.expander("M√©tricas de Quest√µes -> (clique aqui üñ±Ô∏è)")
expander_que.write("(1) Escolas que utilizam pouco o banco n√£o valorizam um de nossos principais diferenciais competitivos em rela√ß√£o ao Google Classroom, ent√£o pode ser uma quest√£o perigosa para potenciais churns. (2) Baixo uso de quest√µes discursivas pode significar uma baixa personaliza√ß√£o do uso da plataforma.")
expander_rel = st.expander("M√©tricas de Rel√°torios -> (clique aqui üñ±Ô∏è)")
expander_rel.write("(1) Visualiza√ß√£o de relat√≥rios: Os nossos relat√≥rios s√£o um de nossos diferenciais para os concorrentes, e sua subutiliza√ß√£o tamb√©m pode indicar um mal uso da plataforma.")

####################################### Pr√≥ximos Passos ##############################

"""
### üõ†Ô∏è Pr√≥ximos Passos
(1) - Testar modelo para todas as escolas do Sucesso do Cliente.
"""
"""
(2) - Colocar novas m√©tricas/tabelas recolhidas na pesquisa no modelo e avaliar se faz sentido ou n√£o.
"""
"""
(3) - Automatiza√ß√£o da gera√ß√£o de csv's para o GitHub
"""
"""
(4) - Estat√≠stica e Machine Learning para avaliar as correla√ß√µes entre as v√°riaveis.
"""
